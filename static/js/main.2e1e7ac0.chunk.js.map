{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","items","deleteItem","updateItem","duration","easing","map","item","className","key","type","id","value","text","onChange","e","target","onClick","App","state","currentItem","handleInput","setState","Date","now","addItem","preventDefault","newItem","handleUpdate","handleDelete","filteredItems","filter","this","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA+BeA,MA3Bf,YAAsD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WACrC,OACE,6BACE,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC7BJ,EAAMK,KAAI,SAACC,GAAD,OACT,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BACEC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GAAD,OAAOZ,EAAWY,EAAEC,OAAOJ,MAAOL,EAAKE,QAEnD,8BACE,uBACED,UAAU,eACVS,QAAS,kBAAMf,EAAWK,EAAKE,iBC4DlCS,E,4MA3EbC,MAAQ,CACNlB,MAAO,GACPmB,YAAa,CACXP,KAAM,GACNJ,IAAK,K,EAITY,YAAc,SAACN,GACb,EAAKO,SAAS,CACZF,YAAa,CACXP,KAAME,EAAEC,OAAOJ,MACfH,IAAKc,KAAKC,U,EAKhBC,QAAU,SAACV,GACTA,EAAEW,iBAEF,IAAMC,EAAU,EAAKR,MAAMC,YAC3B,GAAqB,KAAjBO,EAAQd,KAAa,CACvB,IAAMZ,EAAK,sBAAO,EAAKkB,MAAMlB,OAAlB,CAAyB0B,IAEpC,EAAKL,SAAS,CACZrB,QACAmB,YAAa,CACXP,KAAM,GACNJ,IAAK,Q,EAMbmB,aAAe,SAACf,EAAMJ,GACpB,IAAMR,EAAQ,EAAKkB,MAAMlB,MAEzBA,EAAMK,KAAI,SAACC,GACLA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,MAIhB,EAAKS,SAAS,CAAErB,W,EAGlB4B,aAAe,SAACpB,GACd,IAAMqB,EAAgB,EAAKX,MAAMlB,MAAM8B,QAAO,SAACxB,GAAD,OAAUA,EAAKE,MAAQA,KACrE,EAAKa,SAAS,CAAErB,MAAO6B,K,uDAGf,IAAD,EACwBE,KAAKb,MAA5BlB,EADD,EACCA,MAAOmB,EADR,EACQA,YACf,OACE,yBAAKZ,UAAU,OACb,gCACE,0BAAMG,GAAG,YAAYsB,SAAUD,KAAKP,SAClC,2BACEf,KAAK,OACLwB,YAAY,aACZpB,SAAUkB,KAAKX,YACfT,MAAOQ,EAAYP,OAErB,4BAAQH,KAAK,UAAb,cAGJ,kBAAC,EAAD,CACET,MAAOA,EACPC,WAAY8B,KAAKH,aACjB1B,WAAY6B,KAAKJ,oB,GAtETO,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e1e7ac0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItem.css\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction ListItem({ items, deleteItem, updateItem }) {\r\n  return (\r\n    <div>\r\n      <FlipMove duration={500} easing=\"ease-in-out\">\r\n        {items.map((item) => (\r\n          <div className=\"list\" key={item.key}>\r\n            <p>\r\n              <input\r\n                type=\"text\"\r\n                id={item.key}\r\n                value={item.text}\r\n                onChange={(e) => updateItem(e.target.value, item.key)}\r\n              />\r\n              <span>\r\n                <i\r\n                  className=\"fas fa-trash\"\r\n                  onClick={() => deleteItem(item.key)}\r\n                ></i>\r\n              </span>\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ListItem from \"./ListItem\";\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    currentItem: {\n      text: \"\",\n      key: \"\",\n    },\n  };\n\n  handleInput = (e) => {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n\n  addItem = (e) => {\n    e.preventDefault();\n\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n\n      this.setState({\n        items,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n\n  handleUpdate = (text, key) => {\n    const items = this.state.items;\n\n    items.map((item) => {\n      if (item.key === key) {\n        item.text = text;\n      }\n    });\n\n    this.setState({ items });\n  };\n\n  handleDelete = (key) => {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({ items: filteredItems });\n  };\n\n  render() {\n    const { items, currentItem } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"todo-form\" onSubmit={this.addItem}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter Todo\"\n              onChange={this.handleInput}\n              value={currentItem.text}\n            />\n            <button type=\"submit\">Add Todo</button>\n          </form>\n        </header>\n        <ListItem\n          items={items}\n          deleteItem={this.handleDelete}\n          updateItem={this.handleUpdate}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}